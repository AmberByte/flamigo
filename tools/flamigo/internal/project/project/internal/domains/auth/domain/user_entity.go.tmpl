package auth

import (
	flamigo "github.com/amberbyte/flamigo/core"
)

type User struct {
	ID          string   `json:"id"`
	Username    string   `json:"username"`
	Permissions []string `json:"-"`
}

func (u *User) IsAdmin() bool {
	return u.HasPermission("admin")
}

func (u *User) HasPermission(permission string) bool {
	for _, p := range u.Permissions {
		if p == permission {
			return true
		}
	}
	return false
}

type UserActor interface {
	flamigo.Actor
	User() *User
}

func RequireUserActorWithClaims(ctx flamigo.Context, opts ...flamigo.ActorClaimValidator) (UserActor, error) {
	return flamigo.RequireActorWithClaims[UserActor](ctx, opts...)
}

func IsAuthenticated() flamigo.ActorClaimValidator {
	return func(ctx context.Context, actor flamigo.Actor) error {
		if uA, ok := actor.(UserActor); ok {
			if uA.User() == nil {
				return ErrNotAuthenticated
			}
			return nil
		}
		return ErrNoUserActor
	}
}

func IsUnauthenticated() flamigo.ActorClaimValidator {
	return func(ctx context.Context, actor flamigo.Actor) error {
		if uA, ok := actor.(UserActor); ok {
			if uA.User() != nil {
				return ErrAuthenticated
			}
			return nil
		}
		return ErrNoUserActor
	}
}
